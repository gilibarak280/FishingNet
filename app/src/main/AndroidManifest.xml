<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.gili.fishingnet">

    <!--int permissionCheck = ContextCompat.checkSelfPermission(ReportsFragment, Manifest.permission.CAMERA);-->

    <!--if (ContextCompat.checkSelfPermission(ReportsFragment,Manifest.permission.READ_CONTACTS)!= PackageManager.PERMISSION_GRANTED)-->
    <!--{-->
        <!--if (ActivityCompat.shouldShowRequestPerReportsFragmentmissionRationale(ReportsFragment,Manifest.permission.CAMERA))-->
        <!--{-->

    <!--// Show an expanation to the user *asynchronously* &#45;&#45; don't block-->
    <!--// this thread waiting for the user's response! After the user-->
    <!--// sees the explanation, try again to request the permission.-->
    <!--}-->
    <!--else-->
    <!--{-->

    <!--// No explanation needed, we can request the permission.-->

    <!--ActivityCompat.requestPermissions(ReportsFragment,new String[]{Manifest.permission.CAMERA},5);-->

    <!--// MY_PERMISSIONS_REQUEST_READ_CONTACTS is an-->
    <!--// app-defined int constant. The callback method gets the-->
    <!--// result of the request.-->
        <!--}-->
    <!--}-->

    <!--@Override-->
    <!--public void onRequestPermissionsResult(int requestCode,-->
    <!--String permissions[], int[] grantResults) {-->
    <!--switch (requestCode) {-->
    <!--case MY_PERMISSIONS_REQUEST_READ_CONTACTS: {-->
    <!--// If request is cancelled, the result arrays are empty.-->
    <!--if (grantResults.length > 0-->
     <!--grantResults[0] == PackageManager.PERMISSION_GRANTED) {-->

    <!--// permission was granted, yay! Do the-->
    <!--// contacts-related task you need to do.-->

    <!--} else {-->

    <!--// permission denied, boo! Disable the-->
    <!--// functionality that depends on this permission.-->
    <!--}-->
    <!--return;-->
    <!--}-->

    <!--// other 'case' lines to check for other-->
    <!--// permissions this app might request-->
    <!--}-->
    <!--}-->


    <uses-permission android:name="android.permission.INTERNET" />
    <uses-permission android:name="android.permission.CAMERA" />
    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />



    <uses-feature android:name="android.hardware.camera" />
    <uses-feature android:name="android.hardware.camera.autofocus" />



    <application
        android:name=".FishingNetwork"
        android:allowBackup="true"
        android:icon="@mipmap/ic_launcher"
        android:label="FishingNet "
        android:supportsRtl="true"
        android:theme="@style/AppTheme">
        <activity android:name=".MainActivity">
            <intent-filter>
                <action android:name="android.intent.action.MAIN" />

                <category android:name="android.intent.category.LAUNCHER" />
            </intent-filter>
        </activity>
        <!--
             The API key for Google Maps-based APIs is defined as a string resource.
             (See the file "res/values/google_maps_api.xml").
             Note that the API key is linked to the encryption key used to sign the APK.
             You need a different API key for each encryption key, including the release key that is used to
             sign the APK for publishing.
             You can define the keys for the debug and release targets in src/debug/ and src/release/. 
        -->
        <meta-data
            android:name="com.google.android.geo.API_KEY"
            android:value="@string/google_maps_key" />

        <!--<activity-->
            <!--android:name=".MapsFragment"-->
            <!--android:label="@string/title_activity_maps_fragment"></activity>-->
    </application>

</manifest>